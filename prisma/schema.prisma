generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  orders    Order[]
  payments  Payment[]
  
  @@map("users")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  price       Float
  image       String
  rating      Float
  category    String
  description String
  orderItems  OrderItem[]
  
  @@map("products")
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  payments     Payment[]
  status       OrderStatus @default(ACTIVE)
  totalAmount  Float       @default(0)
  subtotal     Float       @default(0)
  shipping     Float       @default(0)
  discount     Float       @default(0)
  orderNumber  String?     @unique
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  // @@unique([userId, status], name: "user_active_order")
  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now()) @map("created_at") 
  updatedAt DateTime @updatedAt @map("updated_at")      

  @@unique([orderId, productId], name: "order_product_unique")
  @@map("order_items")
}

model Payment {
  id             Int           @id @default(autoincrement())
  orderId        Int
  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId         Int
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus @default(CREATED)
  amount         Float
  
  
  externalId     String? 
  
  
  pixCode        String?       
  pixQrCode      String?       
  pixImageUrl    String?       
  
  
  boletoCode     String?       
  boletoUrl      String?       
  barcodeImage   String?       
  
  
  cardLastFour   String?       
  cardBrand      String?       
  installments   Int?          @default(1) 
  
  
  processorResponse String?     
  failureReason     String?     
  
  
  expiresAt      DateTime?     
  paidAt         DateTime?     
  refundedAt     DateTime?     
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  
  @@index([externalId])
  @@index([paymentStatus])
  @@index([createdAt])
  @@map("payments")
}

enum OrderStatus {
  ACTIVE
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  PIX
  BANK_SLIP
  CREDIT_CARD
}

enum PaymentStatus {
  CREATED       
  PENDING       
  PROCESSING    
  SUCCESS       
  FAILED        
  EXPIRED       
  REFUNDED      
  CANCELLED     
}